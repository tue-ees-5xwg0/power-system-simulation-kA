timestamp,max_u_pu_node,max_u_pu,min_u_pu_node,min_u_pu
2024-01-01 00:00:00,1,1.0048470442653135,3,1.0034498738365447
2024-01-01 01:00:00,3,1.0120531061509728,1,1.0079979041147724
2024-01-01 02:00:00,1,0.9974741443292292,4,0.9843650881808809
2024-01-01 03:00:00,4,1.0065568029242502,1,1.0051896482416867
2024-01-01 04:00:00,4,1.011007265021072,1,1.0058774597264455
2024-01-01 05:00:00,4,1.0204859141946607,1,1.0105695566173851
2024-01-01 06:00:00,1,1.0063415534047364,4,0.9988681574807854
2024-01-01 07:00:00,1,1.004305994652919,3,1.0028216606934037
2024-01-01 08:00:00,4,1.020402434692955,1,1.010500970762458
2024-01-01 09:00:00,4,1.015742205849103,1,1.0100835673523407
import pandas as pd
import pytest
from power_grid import PowerGrid  # Update this import path to match your project
from utilities import pgm_small_path, p_profile_small_path, q_profile_small_path, voltage_summary_small_path  # Update paths as needed

def test_voltage_summary_comparison():
    # Initialize and run the power grid simulation
    grid = PowerGrid(pgm_small_path, p_profile_path=p_profile_small_path, q_profile_path=q_profile_small_path)
    
    # Ensure initial voltage_summary is None
    assert grid.voltage_summary is None
    
    # Run the power flow model
    grid.run()
    
    # Ensure voltage_summary is now populated
    assert grid.voltage_summary is not None

    # Load expected result from CSV
    expected_df = pd.read_csv(voltage_summary_small_path, parse_dates=["timestamp"])
    expected_df.set_index("timestamp", inplace=True)

    # Actual result
    actual_df = grid.voltage_summary.copy()
    
    # Align the dataframes by index
    actual_df, expected_df = actual_df.align(expected_df, join="inner", axis=0)

    # Ensure columns to compare exist
    columns_to_check = ["max_u_pu_node", "max_u_pu", "min_u_pu_node", "min_u_pu"]
    for col in columns_to_check:
        assert col in actual_df.columns, f"Missing column '{col}' in actual DataFrame"
        assert col in expected_df.columns, f"Missing column '{col}' in expected DataFrame"

    # Compare numeric values with tolerance
    for col in columns_to_check:
        pd.testing.assert_series_equal(
            actual_df[col], expected_df[col],
            check_names=True,
            rtol=1e-4, atol=1e-6,  # Adjust tolerance as needed
            obj=f"Mismatch in column: {col}"
        )

